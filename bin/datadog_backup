#!/usr/bin/env ruby

$:.unshift File.join(File.dirname(__FILE__), '../lib')

require 'logger'
require 'optparse'

require 'datadog_backup'
require 'dogapi'

$stdout.sync = $stderr.sync = true
LOGGER = Logger.new($stderr) unless defined?(LOGGER)
LOGGER.level = Logger::INFO

##
# Default parameters
@options = {
  action: nil,
  datadog_api_key: ENV.fetch('DATADOG_API_KEY'),
  datadog_app_key: ENV.fetch('DATADOG_APP_KEY'),  
  backup_dir: File.join(ENV.fetch('PWD'), 'backup'),
  resources: [DatadogBackup::Dashboards, DatadogBackup::Monitors],
  output_format: :json,
  logger: LOGGER
}

def prereqs
  ARGV << '--help' if ARGV.empty?

  opts = OptionParser.new do |opts|
    opts.banner = "Usage: #{File.basename($0)} <backup|restore>"
    opts.separator ''
    opts.on_tail('-h', '--help', 'Show this message') do
      puts opts
      exit 0
    end
    opts.on('--debug', 'debug logging enabled') do
      LOGGER.level = Logger::DEBUG
    end
    opts.on('--backup-dir PATH; backup by default') do |path|
      @options[:backup_dir] = path
    end
    opts.on('--monitors-only') do
      @options[:resources] = [DatadogBackup::Monitors]
    end
    opts.on('--dashboards-only') do
      @options[:resources] = [DatadogBackup::Dashboards]
    end
    opts.on('--yaml') do
      @options[:output_format] = :yaml
    end
  end
  opts.parse!

  @options[:action] = ARGV.first
  if %w[backup diffs].include?(@options[:action])
  else
    puts opts
    exit 0
  end
end

prereqs

DatadogBackup::Cli.new(@options).run!

